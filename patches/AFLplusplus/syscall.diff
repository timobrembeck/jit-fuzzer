diff --git a/linux-user/syscall.c b/linux-user/syscall.c
index ff74df0b97..07475de3f6 100644
--- a/linux-user/syscall.c
+++ b/linux-user/syscall.c
@@ -13217,10 +13217,33 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
         } else {
           fprintf(stderr, "QAsan syscall unsupported without enabling QASan mode (AFL_USE_QASAN)\n");
           return -TARGET_ENOSYS;
         }

+    /* Custom syscall for fuzzing JSC JIT */
+    case 536: ;
+        // this pointer determines the destination of the afl input
+        unsigned char *afl_input = arg1;
+        // how many bytes are requested
+        unsigned int afl_input_size = arg2;
+        // open file handler
+        FILE *afl_input_file_pointer;
+        if ((afl_input_file_pointer = fopen("/tmp/.cur_input","rb")) == NULL) {
+            fprintf(stderr, "[QEMU] Error opening file!\n");
+            return EXIT_FAILURE;
+        }
+        // read content of file into afl_input
+        fread(afl_input, afl_input_size, 1, afl_input_file_pointer);
+        // close file handler
+        fclose(afl_input_file_pointer);
+        // print retrieved afl input bytes
+        fprintf(stderr, "[QEMU] AFL input: ");
+        for (unsigned int i = 0; i < afl_input_size; ++i) fprintf(stderr, "%02x ", afl_input[i]);
+        fprintf(stderr, "\n");
+        // return success
+        return EXIT_SUCCESS;
+
     default:
         qemu_log_mask(LOG_UNIMP, "Unsupported syscall: %d\n", num);
         return -TARGET_ENOSYS;
     }
     return ret;
